using System;
using System.Collections.Generic;

class Program
{
    static void BFS(Dictionary<int, List<int>> graph, int start)
    {
        Queue<int> queue = new Queue<int>(); // Очередь для обработки вершин
        HashSet<int> visited = new HashSet<int>(); // Множество для хранения посещённых вершин

        queue.Enqueue(start); // Добавляем стартовую вершину в очередь и отмечаем её как посещённую
        visited.Add(start);

        while (queue.Count > 0)
        {
            int vertex = queue.Dequeue(); // Извлекаем вершину из очереди
            Console.Write(vertex + " ");  // Выводим текущую вершину

            foreach (int neighbor in graph[vertex]) // Обходим всех соседей текущей вершины
            {
                 if (!visited.Contains(neighbor)) // Если сосед не был посещён, добавляем его в очередь и отмечаем как посещённый
                {
                    queue.Enqueue(neighbor);
                    visited.Add(neighbor);
                }
            }
        }
    }
    static void Main(string[] args)
    {
         var graph = new Dictionary<int, List<int>> // Пример графа в виде списка смежности
        {
            { 1, new List<int> { 2, 3 } },
            { 2, new List<int> { 4 } },
            { 3, new List<int> { 5 } },
            { 4, new List<int> { 6 } },
            { 5, new List<int> { 6 } },
            { 6, new List<int> { } }
        };

        Console.WriteLine("Обход графа в ширину, начиная с вершины 1:"); // Запуск BFS с вершины 1
        BFS(graph, 1);
    }
