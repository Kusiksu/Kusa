using System;
using System.Collections.Generic;

class LevitAlgorithm
{
    public static void LevitShortestPath(Dictionary<int, List<(int, int)>> graph, int start, int vertices)
    {
        // Инициализация
        const int INF = int.MaxValue;
        int[] dist = new int[vertices];
        int[] pred = new int[vertices];

        // Инициализация всех расстояний как бесконечность и предшественников как -1
        for (int i = 0; i < vertices; i++)
        {
            dist[i] = INF;
            pred[i] = -1;
        }
        dist[start] = 0;

        // Очередь для вершин, которые нужно обработать
        LinkedList<int> deque = new LinkedList<int>();
        deque.AddLast(start);

        // Основной цикл алгоритма
        while (deque.Count > 0)
        {
            int u = deque.First.Value;  // Извлекаем вершину из очереди
            deque.RemoveFirst();

            foreach (var (v, weight) in graph[u])  // Обрабатываем соседей
            {
                // Если найден более короткий путь
                if (dist[v] > dist[u] + weight)
                {
                    dist[v] = dist[u] + weight;  // Обновляем кратчайшее расстояние
                    pred[v] = u;  // Обновляем предшественника

                    // Добавляем вершину в очередь в зависимости от ее расстояния
                    if (!deque.Contains(v))
                    {
                        // Убираем с конца, если нужно
                        if (dist[v] < dist[deque.First?.Value ?? v])
                            deque.AddFirst(v);
                        else
                            deque.AddLast(v);
                    }
                }
            }
        }

        // Массив для отображения имен вершин
        string[] vertexNames = { "S", "A", "B", "C" };

        // Вывод результатов
        Console.WriteLine("Вершина | Расстояние | Предшественник");
        for (int i = 0; i < vertices; i++)
        {
            string predName = pred[i] == -1 ? "null" : vertexNames[pred[i]];
            Console.WriteLine($"{vertexNames[i]}       | {dist[i],10} | {predName}");
        }
    }

    // Главная функция
    static void Main()
    {
        // Граф в виде списка смежности (S=0, A=1, B=2, C=3)
        var graph = new Dictionary<int, List<(int, int)>>()
        {
            { 0, new List<(int, int)> { (1, 2), (2, 4) } }, // S
            { 1, new List<(int, int)> { (2, 1), (3, 7) } }, // A
            { 2, new List<(int, int)> { (3, 3) } }, // B
            { 3, new List<(int, int)>() } // C
        };

        // Запуск алгоритма с начальной вершиной S (0)
        LevitShortestPath(graph, 0, 4);
    }
}
