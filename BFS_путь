using System;
using System.Collections.Generic;

class Program
{
    // Метод для поиска кратчайшего пути с использованием BFS
    static void BFS(List<List<int>> graph, int start, int end)
    {
        // Инициализация очереди для обхода
        Queue<int> queue = new Queue<int>();
        queue.Enqueue(start);

        // Словарь для хранения посещённых вершин и предыдущей вершины в пути
        Dictionary<int, int?> parent = new Dictionary<int, int?>();

        // Добавляем стартовую вершину в словарь родительских узлов
        parent[start] = null;

        // Обход графа
        while (queue.Count > 0)
        {
            int vertex = queue.Dequeue();
            Console.WriteLine($"Извлекаем {vertex}, очередь: [{string.Join(", ", queue)}]");

            if (vertex == end)
            {
                Console.WriteLine("Найден путь:");
                PrintPath(parent, start, end);
                return;
            }

            // Проходим по соседним вершинам
            foreach (int neighbor in graph[vertex - 1])
            {
                if (!parent.ContainsKey(neighbor))
                {
                    parent[neighbor] = vertex; // Запоминаем путь
                    queue.Enqueue(neighbor);
                    Console.WriteLine($"Добавляем {neighbor} в очередь, очередь: [{string.Join(", ", queue)}]");
                }
            }
        }

        Console.WriteLine("Путь не найден.");
    }

    // Метод для печати пути от start до end
    static void PrintPath(Dictionary<int, int?> parent, int start, int end)
    {
        Stack<int> path = new Stack<int>();
        int? current = end;

        // Восстанавливаем путь
        while (current != null)
        {
            path.Push(current.Value);
            current = parent[current.Value];
        }

        Console.WriteLine(string.Join(" -> ", path));
    }

    static void Main(string[] args)
    {
        // Граф в виде списка смежности
        var graph = new List<List<int>>
        {
            new List<int> { 2, 5, 6 },    // Вершина 1 соединена с 2, 5 и 6
            new List<int> { 3, 1 },       // Вершина 2 соединена с 3 и 1
            new List<int> { 2, 4, 5 },    // Вершина 3 соединена с 2, 4 и 5
            new List<int> { 3 },          // Вершина 4 соединена с 3
            new List<int> { 1, 3, 6, 7 }, // Вершина 5 соединена с 1, 3, 6 и 7
            new List<int> { 1, 5, 7 },    // Вершина 6 соединена с 1, 5 и 7
            new List<int> { 5, 6 }        // Вершина 7 соединена с 5 и 6
        };

        Console.WriteLine("Поиск кратчайшего пути от вершины 4 до вершины 7:");
        BFS(graph, 4, 7);
    }
}
