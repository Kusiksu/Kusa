// === –ó–∞–¥–∞–Ω–∏–µ 1 ===
function findMax() {
  const a = parseFloat(document.getElementById('num1').value);
  const b = parseFloat(document.getElementById('num2').value);
  const result = Math.max(a, b);
  document.getElementById('maxResult').textContent = `–ë–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ: ${result}`;
}

// === –ó–∞–¥–∞–Ω–∏–µ 2 ===
function generateRange() {
  const num = parseInt(document.getElementById('rangeInput').value);
  if (isNaN(num) || num < 0) {
    document.getElementById('rangeResult').textContent = '–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ';
    return;
  }
  const range = Array.from({ length: num + 1 }, (_, i) => i);
  document.getElementById('rangeResult').textContent = `–ú–∞—Å—Å–∏–≤: [${range.join(', ')}]`;
}

// === –ó–∞–¥–∞–Ω–∏–µ 3 ===
function filterEvenNumbers() {
  const input = document.getElementById('arrayInput').value;
  const numbers = input.split(',').map(n => parseInt(n.trim())).filter(n => !isNaN(n));
  const even = numbers.filter(n => n % 2 === 0);
  document.getElementById('evenResult').textContent = `–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: [${even.join(', ')}]`;
}

// === –ê–Ω–∫–µ—Ç–∞ ===
const form = document.getElementById('userForm');
const fields = form.querySelectorAll('input, textarea, select');

// üîç –†–µ–≥—É–ª—è—Ä–∫–∞ –Ω–∞ –±—É–∫–≤—ã (–ª–∞—Ç–∏–Ω–∏—Ü–∞ + –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
const namePattern = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/;

// === –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è ===
function validateField(field) {
  const errorSpan = field.nextElementSibling;
  let valid = true;
  let errorMessage = '';

  const value = field.value.trim();

  if (!value) {
    valid = false;
    errorMessage = '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
  }

  if (valid && (field.name === 'firstName' || field.name === 'lastName')) {
    if (!namePattern.test(value)) {
      valid = false;
      errorMessage = '–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã';
    }
  }

  if (valid && field.type === 'tel' && !field.validity.valid) {
    valid = false;
    errorMessage = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
  }

  if (valid && field.type === 'email' && !field.validity.valid) {
    valid = false;
    errorMessage = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
  }

  if (!valid) {
    field.classList.add('invalid');
    errorSpan.textContent = errorMessage;
  } else {
    field.classList.remove('invalid');
    errorSpan.textContent = '';
  }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Ñ–æ—Ä–º—ã ===
function validateForm() {
  let isValid = true;
  fields.forEach(field => {
    validateField(field);
    if (field.classList.contains('invalid')) {
      isValid = false;
    }
  });
  return isValid;
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
form.addEventListener('submit', function (e) {
  e.preventDefault();

  const isValid = validateForm();

  if (!isValid) {
    alert('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã.');
    return;
  }

  const formData = {};
  fields.forEach(field => {
    formData[field.name] = field.value.trim();
  });

  localStorage.setItem('formData', JSON.stringify(formData));
  alert('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
});

// === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage ===
document.getElementById('loadData').addEventListener('click', () => {
  const savedData = localStorage.getItem('formData');
  if (!savedData) {
    alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
    return;
  }

  const formData = JSON.parse(savedData);

  fields.forEach(field => {
    if (formData[field.name] !== undefined) {
      field.value = formData[field.name];
      validateField(field); // –≤–∏–∑—É–∞–ª—å–Ω–æ —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    }
  });

  alert('üìÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage.');
});
